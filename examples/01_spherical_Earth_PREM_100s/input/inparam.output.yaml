#
#  inparam.output.yaml
#  AxiSEM3D
#
#  Created by Kuangdai Leng on 5/15/20.
#  Copyright © 2020 Kuangdai Leng. All rights reserved.
#

#  This is an AxiSEM3D input parameter file for
#  station-wise and element-wise output


############################# station-wise #############################
# what: list of station groups
# type: array of objects
# note: 1) different options such as channels and sampling rates can
#          be applied to different station groups; for example, one may have
#          a group of real-world seismic stations recording full displacement
#          vector at a high sampling rate and another group of animation
#          stations recording vertical displacement at a low sampling rate
#       2) use [] if no station group presents
list_of_station_groups:
    ##########################################
    # this key can be arbitrary but must be unique in this list
    - global_seismic_network_GSN:
        # station locations
        locations:
            # what: station location file
            # type: filename
            # note: 1) must be an ascii file with five or six columns:
            #          name network x1 x2 [useless] x3
            #          [useless] is for compatibility with SPECFEM and AxiSEM
            #       2) (x1, x2, x3) depends on the next four options
            #       3) empty lines and comment lines (led by #) are allowed
            station_file: GSN_stations.txt
            # what: horizontal coordinates x1 and x2
            # type: string
            # only: LATITUDE_LONGITUDE / DISTANCE_AZIMUTH
            # note: the unit for "LATITUDE_LONGITUDE" is degree;
            #       the unit for "DISTANCE" is either radian (for a
            #       spherical mesh) or meter (for a Cartesian mesh);
            #       the unit for "AZIMUTH" is radian
            horizontal_x1_x2: LATITUDE_LONGITUDE
            # what: vertical coordinate x3
            # type: string
            # only: RADIUS / DEPTH
            vertical_x3: DEPTH
            # what: use solid surface as depth origin
            # type: bool
            # note: not to be used if vertical_x3 = RADIUS
            depth_below_solid_surface: true
            # what: use undulated (otherwise reference) geometry to
            #       determine the vertical locations
            # type: bool
            # note: compatible with both "RADIUS" and "DEPTH"
            undulated_geometry: true
        # fields for output
        fields:
            # what: coordinate system of output
            # type: string
            # only: spz / RTZ / ENZ
            # note: 1) spz: (s, phi, z) or the cylindrical CS of AxiSEM3D
            #       2) RTZ: (radial, transpose, vertical)
            #       3) ENZ: (east, north, vertical)
            output_CS: RTZ
            # what: type of medium
            # type: string
            # only: SOLID / FLUID
            # note: all stations in this group must be located in either
            #       the solid or the fluid domain
            medium: SOLID
            # what: list of channels
            # type: array of string
            # note: 1) allowed channels for medium = SOLID
            #          * displacement:
            #            U, U1, U2, U3, U_NORM (or |U|)
            #          * gradient of displacement:
            #            G, G11, G12, G13, G21, G22, G23, G31, G32, G33,
            #            Gii (or G_I1)
            #          * strain:
            #            E, E11, E12, E13, E21, E22, E23, E31, E32, E33,
            #            Eii (or E_I1), E_J2
            #          * stress:
            #            S, S11, S12, S13, S21, S22, S23, S31, S32, S33,
            #            Sii (or S_I1), S_J2
            #          * curl:
            #            R, R1, R2, R3, R_NORM (or |R|)
            #      2) allowed channels for medium = FLUID
            #          * displacement:
            #            U, U1, U2, U3, U_NORM (or |U|)
            #          * scalar potential of displacement (U = ∇X):
            #            X
            #          * pressure:
            #            P
            #      3) (1, 2, 3) are determined by output_CS
            channels: [U]
        # IO options
        options:
            # what: output file format
            # type: string
            # only: ASCII_STATION / ASCII_CHANNEL / NETCDF
            # note: 1) ASCII_STATION: one ascii file contains all channels at
            #                         one station, available for a few stations
            #       2) ASCII_CHANNEL: one ascii file contains one channel at
            #                         all stations, available for many stations
            #       3) NETCDF: much more time and memory efficient than ascii,
            #                  available for many stations; parallel NetCDF
            #                  can be activated in CMakeLists.txt
            format: ASCII_STATION
            # what: sampling period
            # type: string / double
            # only: DT / DTx2 / DTx3 / ... / value
            # note: DT stands for Δt of the simulation; DTx3 means
            #       sampling period = Δt * 3
            sampling_period: DT
            # what: buffer time steps for efficient file writing
            # type: int
            # note: 1) this parameter does not affect the final results
            #       2) use 1 to write at each time step (slow);
            buffer_time_steps: 1000000
