#
#  inparam.nr.yaml
#  AxiSEM3D
#
#  Created by Kuangdai Leng on 8/31/19.
#  Copyright © 2019 Kuangdai Leng. All rights reserved.
#

#  This is an AxiSEM3D input parameter file for
#  the Nr field: Nr = Nr(s,z)
#  s:  horizontal coordinate in the meridian domain
#  z:  vertical coordinate in the meridian domain
#  Nr: azimuthal discretization of solution, i.e., the number of
#      "cardinal points" along the "ring" generated by rotating the
#      point (s,z) around the axis by 2π; Nu = Nr/2 is the Fourier
#      expansion order of solution at (s,z)


##################### type #####################
# what: type of Nr(s,z)
# type: string
# only: CONSTANT / ANALYTICAL / POINTWISE / STRUCTURED
# note: 1) CONSTANT:   Nr(s,z) = const
#       2) ANALYTICAL: analytical Nr(s,z) defined in NrFieldAnalytical.cpp
#       3) POINTWISE:  Nr provided at discrete control points
#       4) STRUCTURED: Nr provided on a structured grid
type_Nr: ANALYTICAL

# what: limit Nr(s,z) by inplane resolution
# type: bool
# note: in general, there is no need to use an azimuthal resolution
#       higher than the inplane resolution; users should use true.
limit_Nr_by_inplane: true


##################### constant #####################
# what: the constant value for type_Nr = CONSTANT
# type: int
# note: for an axisymmetric model with a single axial source, use
#       1) 5 for a moment tensor (earthquake)
#       2) 3 for a force vector (impact)
#       3) 1 for a pressure (explosion) in either solid or fluid
constant: 5


##################### analytical #####################
analytical:
    # what: code ID to match NrFieldAnalytical::sCodeID
    # type: string
    # note: to ensure that AxiSEM3D has been compiled with the wanted
    #       NrFieldAnalytical.cpp, repeat here the code ID defined by
    #       NrFieldAnalytical::sCodeID in NrFieldAnalytical.cpp (line 18)
    code_ID: depth-dependent (AxiSEM3D default)

    # what: parameters used by the default NrFieldAnalytical.cpp
    # note: 1) the default NrFieldAnalytical.cpp implements a
    #          depth-dependent Nr(s,z), i.e., Nr(s,z) = Nr(depth),
    #          with code ID = "depth-dependent (AxiSEM3D default)"
    #       2) linear interpolation is applied between two control depths
    depth_dependent_AxiSEM3D_default:
        # what: the control depths
        # type: array of double
        control_depths: [0., 25e3, 670e3, 6371e3]

        # what: Nr at the control depths
        # type: array of double
        Nr_at_control_depths: [20, 20, 10, 10]

    # what: any user-defined parameters for NrFieldAnalytical.cpp
    # type: any
    # note: these parameters can have arbitrary names and types, depending
    #       on how they are read and used in NrFieldAnalytical.cpp
    any_user_defined_parameters:
        example__bool: true
        example__string: Hello world!
        example__array_of_double: [1., 2., 5.]
        example__array_of_string: [Hello world!, path/filename]


##################### pointwise #####################
pointwise:
    # what: netcdf data file that defines Nr(s,z)
    # type: filename
    # note: 1) this file must contain the following two variables:
    #          * pointwise_sz, double, (X, 2), (s,z) of X control points
    #          * pointwise_Nr, int,    (X, ),  Nr at the X control points
    #       2) the unit is meter for s and z
    #       3) interpolation is based on r-tree search
    #       4) another variable starting_Nr_for_scanning can exist if
    #          this file was created by wavefield scanning
    nc_data_file: pointwise.nc

    # what: factor multiplied to Nr(s,z)
    # type: double
    # note: useful if nc_data_file was created by wavefield scanning;
    #       for example, Nr(s,z) obtained by scanning s20rts may be
    #       applied to s40rts by using a factor of 2.0
    multip_factor: 1.


##################### structured #####################
structured:
    # what: netcdf data file that defines Nr(s,z)
    # type: filename
    # note: 1) for a Cartesian mesh, this file must contain three variables:
    #          * structured_s,  double, (M, ),  s of M grid points
    #          * structured_z,  double, (N, ),  z of N grid points
    #          * structured_Nr, int,    (M, N), Nr at the M*N grid points
    #       2) for a sphercial mesh, replace _s with _r and _z with _t (theta)
    #       3) the unit is meter for s, z and r and radian for theta
    nc_data_file: structured.nc

    # what: value of Nr at any location out of the grid range
    # type: int
    value_out_of_range: 5


##################### wavefield scanning #####################
# ~~~~~~~~~~~~~~~
# Q: What is wavefield scanning?
# A: AxiSEM3D "learns" a sub-optimal Nr(s,z) during a simulation and
#    dump the resultant Nr(s,z) into a file, which can be re-used in
#    subsequent simulations with similar input parameters, such as
#    similar (or simpler) 3D models, source depth and record length.
# ~~~~~~~~~~~~~~~
# Q: How to enable wavefield scanning?
# A: Setting enable_scanning = true. The starting (current) Nr(s,z) can be
#    any of {CONSTANT, ANALYTICAL, POINTWISE, STRUCTURED}. The resultant
#    Nr(s,z) is no greater than the starting Nr(s,z).
# ~~~~~~~~~~~~~~~
# Q: How to re-use Nr(s,z) obtained by scanning?
# A: Use type_Nr = POINTWISE, setting nc_data_file to the output file
#    of wavefield scanning (first move it from ./output to ./input)
# ~~~~~~~~~~~~~~~

wavefield_scanning:
    # what: enable/disable wavefield scanning
    # type: bool
    # note: enabling wavefield scanning barely slows a simulation but
    #       may significantly increase memory usage
    enable_scanning: true

    # what: output file
    # type: filename
    output_file: scanning_output_Nr.nc

    # what: relative threshold for the convergence of Fourier series
    # type: double
    # note: 1) allowed range: [1e-3, 1e-1]
    #       2) this parameter can be understood as the accuracy loss of
    #          the subsequent simulations compared to the scanning one
    threshold_Fourier_convergence: 1e-2

    # advanced scanning parameters users are unlikely to change
    advanced:
        # what: relative threshold for small amplitudes skipped for scanning
        # type: double
        # note: recommended range: [1e-3, 1e-1]
        relative_amplitude_skipped: 1e-2

        # what: absolute threshold for small amplitudes skipped for scanning
        # type: double
        # note: recommended range: [1e-14, 1e-10]
        absolute_amplitude_skipped: 1e-12

        # what: perform scanning only on vertex GLL points
        # type: bool
        # note: significantly decrease run-time memory and output size
        vertex_only: true

        # what: number of time steps to be scanned per mesh period
        # type: int
        # note: recommended range: [8, 16]
        num_steps_per_mesh_period: 12
